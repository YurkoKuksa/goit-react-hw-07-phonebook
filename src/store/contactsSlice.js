import { createSlice, isAnyOf } from '@reduxjs/toolkit';
import {
  addContactsThunk,
  fetchDeleteThunk,
  fetchNameThunk,
} from './operations';

const initialState = {
  contacts: [],
  loading: false,
  error: null,
};

// Create Redux state slice
const contactsSlice = createSlice({
  name: 'contacts',
  initialState,

  reducers: {
    // Define reducers
    addContacts: (state, action) => {
      state.contacts = [...state.contacts, action.payload];
    },
    removeContacts: (state, action) => {
      state.contacts = state.contacts.filter(
        element => element.id !== action.payload
      );
    },
  },

  extraReducers: builder => {
    builder
      .addCase(fetchNameThunk.fulfilled, (state, action) => {
        state.contacts = action.payload;
      })
      .addCase(addContactsThunk.fulfilled, (state, action) => {
        state.contacts = state.contacts.concat(action.payload);
      })
      .addCase(fetchDeleteThunk.fulfilled, (state, action) => {
        state.contacts = state.contacts.filter(
          contact => contact.id !== action.payload
        );
      })
      .addMatcher(
        isAnyOf(addContactsThunk.rejected, fetchNameThunk.rejected),
        (state, action) => {
          state.error = action.payload;
        }
      )
      .addMatcher(
        isAnyOf(addContactsThunk.pending, fetchNameThunk.pending),
        (state, action) => {
          state.loading = true;
        }
      )
      .addMatcher(
        isAnyOf(addContactsThunk.fulfilled, fetchNameThunk.fulfilled),
        (state, action) => {
          state.loading = false;
        }
      );
  },
});

export const { addContacts, removeContacts } = contactsSlice.actions;

// Export reducer generated by "createSlice()":
export default contactsSlice.reducer;

// reducers: {
//     fetchingInProgress(state) {
//       state.isLoading = true;
//     },
//     fetchingSuccess(state, action) {
//       state.isLoading = false;
//       state.error = null;
//       state.items = action.payload;
//     },
//     fetchingError(state, action) {
//       state.isLoading = false;
//       state.error = action.payload;
//     },

// export const { fetchingInProgress, fetchingSuccess, fetchingError } =
//   tasksSlice.actions;
